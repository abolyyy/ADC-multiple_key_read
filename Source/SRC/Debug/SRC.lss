
SRC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000923  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000581  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bc  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001a8  000001a8  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000126  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000001b2  000001b2  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000001ac  000001ac  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
   8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
   c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000001a8 <__bad_interrupt>:
 1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

0000006c <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRD |= 0x1f;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f 61       	ori	r24, 0x1F	; 31
  70:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0x00;
  72:	82 b3       	in	r24, 0x12	; 18
  74:	82 bb       	out	0x12, r24	; 18
	cbi(DDRA,0);
  76:	8a b3       	in	r24, 0x1a	; 26
  78:	8e 7f       	andi	r24, 0xFE	; 254
  7a:	8a bb       	out	0x1a, r24	; 26
	ADMUX |= (1<<MUX0);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADIF) | (1<<ADPS1) | (1<<ADPS0);
  82:	86 b1       	in	r24, 0x06	; 6
  84:	83 69       	ori	r24, 0x93	; 147
  86:	86 b9       	out	0x06, r24	; 6
		
	uint16_t i=0;
    while(1)
    {
		sbi(ADCSRA,ADSC);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	86 b9       	out	0x06, r24	; 6
		while(CHECKBIT(ADCSRA,ADIF) != 1);
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0x22>
		sbi(ADCSRA,ADIF);
  92:	86 b1       	in	r24, 0x06	; 6
  94:	80 61       	ori	r24, 0x10	; 16
  96:	86 b9       	out	0x06, r24	; 6
		i = ADCW;
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	95 b1       	in	r25, 0x05	; 5
		
		
		if(i > 182 && i<214){
  9c:	9c 01       	movw	r18, r24
  9e:	27 5b       	subi	r18, 0xB7	; 183
  a0:	31 09       	sbc	r19, r1
  a2:	2f 31       	cpi	r18, 0x1F	; 31
  a4:	31 05       	cpc	r19, r1
  a6:	98 f4       	brcc	.+38     	; 0xce <main+0x62>
			
			CHECKBIT(PORTD,4) ? (cbi(PORTD,4)) : (sbi(PORTD,4)) ;
  a8:	94 9b       	sbis	0x12, 4	; 18
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <main+0x48>
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	03 c0       	rjmp	.+6      	; 0xba <main+0x4e>
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e5       	ldi	r18, 0x5F	; 95
  bc:	8a ee       	ldi	r24, 0xEA	; 234
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
  cc:	dd cf       	rjmp	.-70     	; 0x88 <main+0x1c>
			_delay_ms(300);
			i=0;
			
		}
		else if(i > 389 && i<437){
  ce:	9c 01       	movw	r18, r24
  d0:	26 58       	subi	r18, 0x86	; 134
  d2:	31 40       	sbci	r19, 0x01	; 1
  d4:	2f 32       	cpi	r18, 0x2F	; 47
  d6:	31 05       	cpc	r19, r1
  d8:	98 f4       	brcc	.+38     	; 0x100 <main+0x94>
			
			CHECKBIT(PORTD,3) ? (cbi(PORTD,3)) : (sbi(PORTD,3)) ;
  da:	93 9b       	sbis	0x12, 3	; 18
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <main+0x7a>
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x80>
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	2f e5       	ldi	r18, 0x5F	; 95
  ee:	8a ee       	ldi	r24, 0xEA	; 234
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x86>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x90>
  fc:	00 00       	nop
  fe:	c4 cf       	rjmp	.-120    	; 0x88 <main+0x1c>
			_delay_ms(300);
			i=0;
			
		}
		else if(i > 592 && i<640){
 100:	9c 01       	movw	r18, r24
 102:	21 55       	subi	r18, 0x51	; 81
 104:	32 40       	sbci	r19, 0x02	; 2
 106:	2f 32       	cpi	r18, 0x2F	; 47
 108:	31 05       	cpc	r19, r1
 10a:	98 f4       	brcc	.+38     	; 0x132 <main+0xc6>
			
			CHECKBIT(PORTD,2) ? (cbi(PORTD,2)) : (sbi(PORTD,2)) ;
 10c:	92 9b       	sbis	0x12, 2	; 18
 10e:	04 c0       	rjmp	.+8      	; 0x118 <main+0xac>
 110:	82 b3       	in	r24, 0x12	; 18
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	82 bb       	out	0x12, r24	; 18
 116:	03 c0       	rjmp	.+6      	; 0x11e <main+0xb2>
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	2f e5       	ldi	r18, 0x5F	; 95
 120:	8a ee       	ldi	r24, 0xEA	; 234
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0xb8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0xc2>
 12e:	00 00       	nop
 130:	ab cf       	rjmp	.-170    	; 0x88 <main+0x1c>
			_delay_ms(300);
			i=0;
		}
		else if(i > 788 && i<822){
 132:	9c 01       	movw	r18, r24
 134:	25 51       	subi	r18, 0x15	; 21
 136:	33 40       	sbci	r19, 0x03	; 3
 138:	21 32       	cpi	r18, 0x21	; 33
 13a:	31 05       	cpc	r19, r1
 13c:	98 f4       	brcc	.+38     	; 0x164 <main+0xf8>
			
			CHECKBIT(PORTD,1) ? (cbi(PORTD,1)) : (sbi(PORTD,1)) ;
 13e:	91 9b       	sbis	0x12, 1	; 18
 140:	04 c0       	rjmp	.+8      	; 0x14a <main+0xde>
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	82 bb       	out	0x12, r24	; 18
 148:	03 c0       	rjmp	.+6      	; 0x150 <main+0xe4>
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	82 bb       	out	0x12, r24	; 18
 150:	2f e5       	ldi	r18, 0x5F	; 95
 152:	8a ee       	ldi	r24, 0xEA	; 234
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0xea>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xf4>
 160:	00 00       	nop
 162:	92 cf       	rjmp	.-220    	; 0x88 <main+0x1c>
			_delay_ms(300);
			i=0;
		}
		else if(i > 1000){
 164:	89 3e       	cpi	r24, 0xE9	; 233
 166:	93 40       	sbci	r25, 0x03	; 3
 168:	08 f4       	brcc	.+2      	; 0x16c <main+0x100>
 16a:	8e cf       	rjmp	.-228    	; 0x88 <main+0x1c>
			
			CHECKBIT(PORTD,0) ? (cbi(PORTD,0)) : (sbi(PORTD,0)) ;
 16c:	90 9b       	sbis	0x12, 0	; 18
 16e:	04 c0       	rjmp	.+8      	; 0x178 <main+0x10c>
 170:	82 b3       	in	r24, 0x12	; 18
 172:	8e 7f       	andi	r24, 0xFE	; 254
 174:	82 bb       	out	0x12, r24	; 18
 176:	03 c0       	rjmp	.+6      	; 0x17e <main+0x112>
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	82 bb       	out	0x12, r24	; 18
 17e:	8f e5       	ldi	r24, 0x5F	; 95
 180:	9a ee       	ldi	r25, 0xEA	; 234
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	81 50       	subi	r24, 0x01	; 1
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x118>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x122>
 18e:	00 00       	nop
 190:	7b cf       	rjmp	.-266    	; 0x88 <main+0x1c>

Disassembly of section .text.__dummy_fini:

000001b0 <_fini>:
 1b0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001b2 <__funcs_on_exit>:
 1b2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b4 <__simulator_exit>:
 1b4:	08 95       	ret

Disassembly of section .text.exit:

00000192 <exit>:
 192:	ec 01       	movw	r28, r24
 194:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__funcs_on_exit>
 198:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_fini>
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__simulator_exit>
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Exit>

Disassembly of section .text._Exit:

000001ac <_Exit>:
 1ac:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
